(ns learn-clojure.core
  (:require [learn-clojure.problem-1 :refer [problem_1]])
  (:require [learn-clojure.problem-2 :refer [problem_2]])
  (:require [learn-clojure.problem-3 :refer [problem_3]])
  (:require [learn-clojure.problem-4 :refer [problem_4]])
  (:require [learn-clojure.problem-5 :refer [problem_5]])
  (:require [learn-clojure.problem-6 :refer [problem_6]])
  (:require [learn-clojure.problem-7 :refer [problem_7]])
  (:require [learn-clojure.problem-8 :refer [problem_8]])
  (:require [learn-clojure.problem-9 :refer [problem_9]])
  (:require [learn-clojure.problem-10 :refer [problem_10]])
  (:require [learn-clojure.problem-11 :refer [problem_11]])
  (:require [learn-clojure.problem-12 :refer [problem_12]])
  (:require [learn-clojure.problem-13 :refer [problem_13]])
  (:require [learn-clojure.problem-14 :refer [problem_14]])
  (:require [learn-clojure.problem-15 :refer [problem_15]])
  (:require [learn-clojure.problem-16 :refer [problem_16]])
  (:require [learn-clojure.problem-17 :refer [problem_17]])
  (:require [learn-clojure.problem-18 :refer [problem_18]])
  (:require [learn-clojure.problem-19 :refer [problem_19]])
  (:require [learn-clojure.problem-20 :refer [problem_20]])
  (:require [learn-clojure.problem-21 :refer [problem_21]])
  (:require [learn-clojure.problem-22 :refer [problem_22]])
  (:require [learn-clojure.problem-23 :refer [problem_23]])
  (:require [learn-clojure.problem-24 :refer [problem_24]])
  (:require [learn-clojure.problem-25 :refer [problem_25]])
  (:require [learn-clojure.problem-26 :refer [problem_26]])
  (:require [learn-clojure.problem-27 :refer [problem_27]])
  (:require [learn-clojure.problem-28 :refer [problem_28]])
  (:require [learn-clojure.problem-29 :refer [problem_29]])
  (:require [learn-clojure.problem-30 :refer [problem_30]])
  (:require [learn-clojure.problem-31 :refer [problem_31]])
  (:require [learn-clojure.problem-32 :refer [problem_32]])
  (:require [learn-clojure.problem-33 :refer [problem_33]])
  (:require [learn-clojure.problem-34 :refer [problem_34]])
  (:require [learn-clojure.problem-35 :refer [problem_35]])
  (:require [learn-clojure.problem-36 :refer [problem_36]])
  (:require [learn-clojure.problem-37 :refer [problem_37]])
  (:require [learn-clojure.problem-38 :refer [problem_38]])
  (:require [learn-clojure.problem-39 :refer [problem_39]])
  (:require [learn-clojure.problem-40 :refer [problem_40]])
  (:require [learn-clojure.problem-41 :refer [problem_41]])
  (:require [learn-clojure.problem-42 :refer [problem_42]])
  (:require [learn-clojure.problem-43 :refer [problem_43]])
  (:require [learn-clojure.problem-44 :refer [problem_44]])
  (:require [learn-clojure.problem-45 :refer [problem_45]])
  (:require [learn-clojure.problem-46 :refer [problem_46]])
  (:require [learn-clojure.problem-47 :refer [problem_47]])
  (:require [learn-clojure.problem-48 :refer [problem_48]])
  (:require [learn-clojure.problem-49 :refer [problem_49]])
  (:require [learn-clojure.problem-50 :refer [problem_50]])
  (:require [learn-clojure.problem-51 :refer [problem_51]])
  (:require [learn-clojure.problem-52 :refer [problem_52]])
  (:require [learn-clojure.problem-53 :refer [problem_53]])
  (:require [learn-clojure.problem-54 :refer [problem_54]])
  (:require [learn-clojure.problem-55 :refer [problem_55]])
  (:require [learn-clojure.problem-56 :refer [problem_56]])
  (:require [learn-clojure.problem-57 :refer [problem_57]])
  (:require [learn-clojure.problem-58 :refer [problem_58]])
  (:require [learn-clojure.problem-59 :refer [problem_59]])
  (:require [learn-clojure.problem-60 :refer [problem_60]])
  (:require [learn-clojure.problem-61 :refer [problem_61]])
  (:require [learn-clojure.problem-62 :refer [problem_62]])
  (:require [learn-clojure.problem-62 :refer [problem_62]])
  (:require [learn-clojure.problem-63 :refer [problem_63]])
  (:require [learn-clojure.problem-64 :refer [problem_64]])
  (:require [learn-clojure.problem-65 :refer [problem_65]])
  (:require [learn-clojure.problem-66 :refer [problem_66]])
  (:require [learn-clojure.problem-67 :refer [problem_67]])
  (:require [learn-clojure.problem-68 :refer [problem_68]])
  (:require [learn-clojure.problem-69 :refer [problem_69]])
  (:require [learn-clojure.problem-70 :refer [problem_70]])
  (:require [learn-clojure.problem-71 :refer [problem_71]])
  (:require [learn-clojure.problem-72 :refer [problem_72]])
  (:require [learn-clojure.problem-73 :refer [problem_73]]))

(defn -main
  [& args]
  (case (first args)
    "1" (problem_1)
    "2" (problem_2)
    "3" (problem_3)
    "4" (problem_4)
    "5" (problem_5)
    "6" (problem_6)
    "7" (problem_7)
    "8" (problem_8)
    "9" (problem_9)
    "10" (problem_10)
    "11" (problem_11)
    "12" (problem_12)
    "13" (problem_13)
    "14" (problem_14)
    "15" (problem_15)
    "16" (problem_16)
    "17" (problem_17)
    "18" (problem_18)
    "19" (problem_19)
    "20" (problem_20)
    "21" (problem_21)
    "22" (problem_22)
    "23" (problem_23)
    "24" (problem_24)
    "25" (problem_25)
    "26" (problem_26)
    "27" (problem_27)
    "28" (problem_28)
    "29" (problem_29)
    "30" (problem_30)
    "31" (problem_31)
    "32" (problem_32)
    "33" (problem_33)
    "34" (problem_34)
    "35" (problem_35)
    "36" (problem_36)
    "37" (problem_37)
    "38" (problem_38)
    "39" (problem_39)
    "40" (problem_40)
    "41" (problem_41)
    "42" (problem_42)
    "43" (problem_43)
    "44" (problem_44)
    "45" (problem_45)
    "46" (problem_46)
    "47" (problem_47)
    "48" (problem_48)
    "49" (problem_49)
    "50" (problem_50)
    "51" (problem_51)
    "52" (problem_52)
    "53" (problem_53)
    "54" (problem_54)
    "55" (problem_55)
    "56" (problem_56)
    "57" (problem_57)
    "58" (problem_58)
    "59" (problem_59)
    "60" (problem_60)
    "61" (problem_61)
    "62" (problem_62)
    "63" (problem_63)
    "64" (problem_64)
    "65" (problem_65)
    "66" (problem_66)
    "67" (problem_67)
    "68" (problem_68)
    "69" (problem_69)
    "70" (problem_70)
    "71" (problem_71)
    "72" (problem_72)
    "73" (problem_73)
    (println "No match found. Please choose a positive integer.")))
